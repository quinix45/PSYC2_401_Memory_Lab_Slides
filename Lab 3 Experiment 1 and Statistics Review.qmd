---
title: "Lab 3: Memory Span Experiment and Statistics Review"
title-slide-attributes:
  
  data-background-image: images/Edge_1.png,
                         images/Edge_1_inverted.png
                         
  data-background-size: 13%,
                        13%
                        
  data-background-position: 0% 0%,
                            100% 100%
  
  data-background-opacity: 100%
  
  #data-visibility: uncounted
  
author: "Fabio Setti"
date: "PSYC 2401 Lab <br> Fall 2023"
format:
   revealjs:
      footer: "Lab 3: Memory Span Experiment and Statistics Review"
      chalkboard: true
      theme: Memory_lab_theme.scss
      navigation-mode: linear
      controls: false
      slide-number: c 
      width: 1280
      height: 720
      transition-speed: slow
      #parallax-background-image: images/Brain_lightbulb_L.jpg
      #logo: images/Brain_lightbulb_L.jpg

editor: source
---

## plots {visibility="hidden"}

```{r echo=FALSE}
library(spData)
library(sf)
library(ggplot2)
library(magick)
library(geomtextpath)
library(extrafont)
library(ggpubr)
 
# data

data <- data.frame( Age = c(11, 12, 13, 13, 14, 15),
                    Height = c(17, 18, 19, 19, 20, 20))

```


```{r echo=FALSE}

# empty plot

empty_plot <- ggplot(data, aes(x = Age, y = Height)) +
  geom_point(alpha = 0) +
  labs(title = "", x = "Age", y = "Height") +
  geom_point(alpha = 0) +
  theme_classic() +
 # age 11
  geom_segment(aes(x = 11, 
                   y = 17, 
                   xend = 11, 
                   yend = 17.2),
                   color = "blue",
                   linetype = "dotdash",
                   alpha = 1) +
 # age 12
  geom_segment(aes(x = 12, 
                   y = 17, 
                   xend = 12, 
                   yend = 17.2),
                   color = "blue",
                   linetype = "dotdash",
                   alpha = 1) +
   # age 13
  geom_segment(aes(x = 13, 
                   y = 17, 
                   xend = 13, 
                   yend = 17.4),
                   color = "blue",
                   linetype = "dotdash",
                   alpha = 1) +
   # age 14
  geom_segment(aes(x = 14, 
                   y = 17, 
                   xend = 14, 
                   yend = 17.2),
                   color = "blue",
                   linetype = "dotdash",
                   alpha = 1) +
   # age 15
  geom_segment(aes(x = 15, 
                   y = 17, 
                   xend = 15, 
                   yend = 17.2),
                   color = "blue",
                   linetype = "dotdash",
                   alpha = 1) +
  theme(
    panel.background = element_rect(fill='transparent'), 
    plot.background = element_rect(fill='transparent', color=NA), 
    legend.background = element_rect(fill='transparent'),
    legend.box.background = element_rect(fill='transparent'),
    axis.title.y = element_blank(),  # Remove y-axis title
    axis.text.y = element_blank(),
    axis.line.y = element_line(color = "transparent"),
    axis.ticks.y = element_blank())

  
#print(empty_plot)

# Print the scatter plot

ggsave("images/empty_plot.png")

```


```{r echo=FALSE}

# mean plot

mean_plot <- ggplot(data, aes(x = Age, y = Height)) +
  geom_point(alpha = 0) +
  labs(title = "", x = "Age", y = "Height") +
  geom_vline(xintercept = mean(data$Age),
             linetype = "dotted",
             color = "red") +
  geom_point(alpha = 0) +
  theme_classic() +
  theme(
    panel.background = element_rect(fill='transparent'), 
    plot.background = element_rect(fill='transparent', color=NA), 
    legend.background = element_rect(fill='transparent'),
    legend.box.background = element_rect(fill='transparent'),
    axis.title.y = element_blank(),  # Remove y-axis title
    axis.text.y = element_blank(),
    axis.line.y = element_line(color = "transparent"),
    axis.ticks.y = element_blank(),
    text = element_text(family = "A")) +
  annotate("text", x = 13.3, y = 19, label = "Mean Age")


  
# print(mean_plot)

# Print the scatter plot

ggsave("images/mean_plot.png")

```


```{r echo=FALSE}

# sd plot

sd_plot <- ggplot(data, aes(x = Age, y = Height)) +
  geom_point(alpha = 0) +
  labs(title = "", x = "Age", y = "Height") +
  geom_vline(xintercept = mean(data$Age),
             linetype = "dotted",
             color = "red",
             alpha = .5) +
  geom_segment(aes(x = 13 - sd(Age), 
                   y = 18 , 
                   xend = 13 + sd(Age), 
                   yend = 18),
                   color = "maroon",
                   linetype = "dashed",
                   arrow = arrow( ends = "both"),
                   alpha = 1) +
  geom_point(alpha = 0) +
  theme_classic() +
  theme(
    panel.background = element_rect(fill='transparent'), 
    plot.background = element_rect(fill='transparent', color=NA), 
    legend.background = element_rect(fill='transparent'),
    legend.box.background = element_rect(fill='transparent'),
    axis.title.y = element_blank(),  # Remove y-axis title
    axis.text.y = element_blank(),
    axis.line.y = element_line(color = "transparent"),
    axis.ticks.y = element_blank()) +
  annotate("text", x = 13 + sd(data$Age), y = 18.5, label = "1 SD\n above the mean") +
  annotate("text", x = 13 - sd(data$Age), y = 18.5, label = "- 1 SD\n below the mean")



  

# print(sd_plot)

# Print the scatter plot

ggsave("images/sd_plot.png")

```



```{r echo=FALSE}
# empty scatterplot


empty_scatter_plot <- ggplot(data, aes(x = Age, y = Height)) +
  geom_point(alpha = 0) +  # Adding points to the plot
  labs(title = "", x = "Age", y = "Height") +
  theme_classic() +
  theme(
    panel.background = element_rect(fill='transparent'), #transparent panel bg
    plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
    legend.background = element_rect(fill='transparent'), #transparent legend bg
    legend.box.background = element_rect(fill='transparent') #transparent legend panel
  )

# Print the scatterplot

print(empty_scatter_plot)

ggsave("images/empty_scatter_plot.png")

```



```{r echo=FALSE}
# scatterplot


scatter_plot <- ggplot(data, aes(x = Age, y = Height)) +
  geom_point() +  
  labs(title = "", x = "Age", y = "Height") +
  theme_classic() +
  theme(
    panel.background = element_rect(fill='transparent'), #transparent panel bg
    plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
    legend.background = element_rect(fill='transparent'), #transparent legend bg
    legend.box.background = element_rect(fill='transparent') #transparent legend panel
  )

# Print the scatterplot

print(scatter_plot)

ggsave("images/scatter_plot.png")

```



```{r echo=FALSE}
# cor scatterplot


scatter_plot_cor <- ggplot(data, aes(x = Age, y = Height)) +
  geom_point() +  
  stat_cor(aes(label = ..r.label..)) +
  labs(title = "", x = "Age", y = "Height") +
  theme_classic() +
  theme(
    panel.background = element_rect(fill='transparent'), #transparent panel bg
    plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
    legend.background = element_rect(fill='transparent'), #transparent legend bg
    legend.box.background = element_rect(fill='transparent') #transparent legend panel
  )

# Print the scatterplot

print(scatter_plot_cor)

ggsave("images/scatter_plot_cor.png")

```


```{r echo=FALSE}
# cor scatterplot


scatter_plot_reg <- ggplot(data, aes(x = Age, y = Height)) +
  geom_point() +  
  stat_smooth(method = "lm",
            formula = y ~ x,
            geom = "smooth",
            se = FALSE,
            linetype = "dashed",
            color = "red",
            linewidth = .5) +
  stat_regline_equation(label.x = 13, label.y = 17.4) +
  labs(title = "", x = "Age", y = "Height") +
  theme_classic() +
  theme(
    panel.background = element_rect(fill='transparent'), 
    plot.background = element_rect(fill='transparent', color=NA), 
    legend.background = element_rect(fill='transparent'),
    legend.box.background = element_rect(fill='transparent')) +
  ylim(17, 20)

# Print the scatterplot

print(scatter_plot_reg)

ggsave("images/scatter_plot_reg.png")

```


# {transition="zoom" data-menu-title="Memory Span Experiment"}

::: {layout-ncol="2"}

::: col

</br>

<p style=" 

  font-size: 2.2em;
  font-weight:	800;
  font-family: sans-serif;
  smargin: 0 0 20px 0;
  color: #6971E0;
  font-family: "League Gothic", Impact, sans-serif;
  line-height: 0.7em;
  letter-spacing: 0.04em;
  text-transform: capitalize;
  text-shadow: none; "> Memory Span Experiment 
  
</p>


:::


:::col
![](images/Experiment_kids.png)

:::
:::

## Experimental Design Concepts

![](images/Experiment_kids.png){.absolute top=-50 right=-50 width="120" height="90"}



## Experiment Instructions

![](images/Experiment_kids.png){.absolute top=-50 right=-50 width="120" height="90"}


::: {layout-ncol="2"}

::: col

<center>

<p style="font-size: 30px;">
Log into your CogLab account and click on “complete lab”
</p>

 **&darr;** 

<p style="font-size: 30px;">
Then, select “**24.Memory Span**”
</p>

**&darr;**

<p style="font-size: 30px;">
Please, *Do not* read the “background” or the “instructions”. Click [here]() for the experiment instructions.
</p>

**&darr;**

<p style="font-size: 30px;">
After you are done, you are free to scroll to the top and read the “background” section. 
</p>

</center>

:::


:::col
![](images/Memory_head.png)

:::
:::



# {transition="zoom" data-menu-title="Statistics Review"}


::: {layout-ncol="2"}

::: col

<br /> <br />

<p style=" 

  font-size: 2.4em;
  font-weight:	800;
  font-family: sans-serif;
  smargin: 0 0 20px 0;
  color: #6971E0;
  font-family: "League Gothic", Impact, sans-serif;
  line-height: 0.9em;
  letter-spacing: 0.04em;
  text-transform: capitalize;
  text-shadow: none; "> Statistics Review 
  
</p>


:::


:::col
![](images/Statistics_review.png)

:::
:::

## Mean and Standard Deviation

![](images/Statistics_review.png){.absolute top=-50 right=-50 width="130" height="100"}


::: {layout-ncol="2"}

::: col

<p style = "font-size:26px;"> Although basic, the mean and standard deviation (*SD*) are very important concepts. Let us assume that we recorded the age of 6 people: </p>

:::{.fragment fragment-index="1"}
<center> <p style = "font-size:26px;"> *Age* </p> </center>

<center> <p style = "font-size:22px;">  11, 12, 13, 13, 14 ,15 </p> </center>
:::

<ul style = "font-size:20px;
             margin: 20px;">
             
            

:::{.fragment fragment-index="2"}
<li> 
$Mean_{Age} = \frac{\sum Age_i}{N_{Age}} = \frac{11 + 12 + 13 + 13 +14 +15}{6} = 13$
</li>
:::

</br>


:::{.fragment fragment-index="3"}
<li> 
$SD_{Age} = \frac{\sqrt{\sum(Mean_{Age} - Age_i)^2}}{N_{Age}- 1} = 1.41$ 
</li>
:::

</ul>

</br>

:::{.fragment fragment-index="4"}
<p style = "font-size:26px;"> The *mean* is a measure of central tendency, and the *SD* measures how spread out the data is. </p>
:::


:::


:::col

</br>
</br>

::: r-stack


::: {.fragment .fade-in-then-semi-out fragment-index="1"}
```{r, echo=FALSE}
print(
  image_read("images/empty_plot.png"),
  info = FALSE
)
```
:::



::: {.fragment .fade-in-then-semi-out fragment-index="2"}
```{r, echo=FALSE}
print(
  image_read("images/mean_plot.png"),
  info = FALSE
)
```
:::

::: {.fragment .fade-in fragment-index="3"}
```{r, echo=FALSE}
print(
  image_read("images/sd_plot.png"),
  info = FALSE
)

```
:::


:::



:::

:::



## Correlation and Regression

![](images/Statistics_review.png){.absolute top=-50 right=-50 width="130" height="100"}


::: {layout-ncol="2"}

::: col

<p style = "font-size:24px;"> It turns out that one cannot calculate many statistics with just one variable 🤷 Let's also assume that, aside from people's age, we also measured their *height*: </p>

::: {.fragment fragment-index="1"}
<p style = "font-size:22px;"> **Age:** 11, 12, 13, 13, 14 ,15 </p> 
<p style = "font-size:22px;"> **Height:** 17, 18, 19, 19, 20, 20 </p> 
:::

<p style = "font-size:24px;padding-top: 25px;"> [Astute observers 🧐 will probably notice a "tiny" upward trend.]{.fragment fragment-index="3"} [The Age and Height variables are indeed highly [*positively correlated*](https://shiny.rit.albany.edu/stat/rectangles/){preview-link="true"}, meaning that as age increases, so does height.]{.fragment fragment-index="4"} </p>

::: {.fragment fragment-index="5"}
<p style = "font-size:24px;padding-top: 25px;"> [*Regression*](https://altaf.shinyapps.io/linear-regression/){preview-link="true"} simply plots the line that is closest to all the points. In our case, the line can be defined as $Height_i = a + b\times Age_i$, were $a$ represents where the line hits the Y-axis (y intercept) and $b$ is the line slope.</p>


:::

:::


:::col

</br>
</br>

::: r-stack


::: {.fragment .fade-in-then-out fragment-index="1"}
```{r, echo=FALSE}
print(
  image_read("images/empty_scatter_plot.png"),
  info = FALSE
)
```
:::



::: {.fragment .fade-in-then-out fragment-index="2"}
```{r, echo=FALSE}
print(
  image_read("images/scatter_plot.png"),
  info = FALSE
)
```
:::

::: {.fragment .fade-in-then-out fragment-index="3"}
```{r, echo=FALSE}
print(
  image_read("images/scatter_plot.png"),
  info = FALSE
)

```
:::

::: {.fragment .fade-in-then-out fragment-index="4"}
```{r, echo=FALSE}
print(
  image_read("images/scatter_plot_cor.png"),
  info = FALSE
)

```
:::

::: {.fragment .fade-in-then-semi-out fragment-index="5"}
```{r, echo=FALSE}
print(
  image_read("images/scatter_plot_cor.png"),
  info = FALSE
)

```
:::


::: {.fragment .fade-in fragment-index="6"}
```{r, echo=FALSE}
print(
  image_read("images/scatter_plot_reg.png"),
  info = FALSE
)

```
:::

:::

:::

:::

::: {.fragment fragment-index="7"}
<p style = "font-size:18px;"> **NOTE**: Correlation and regression carry very similar information. For instance, the correlation coefficient and the line slope are equivalent, $R = b\times \frac{SD_{Age}}{SD_{Height}} = 0.8 \times \frac{1.4}{1.17} 	\approx .97$ </p>
:::

# T-tests

T-tests 

# ANOVA

